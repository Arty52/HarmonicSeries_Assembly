     1                                  ;Author information
     2                                  ;  Author name: Art Grichine
     3                                  ;  Author email: ArtGrichine@gmail.com
     4                                  ;Course information
     5                                  ;  Course number: CPSC240
     6                                  ;  Assignment number: 6
     7                                  ;  Due date: 2014-May-08
     8                                  ;Project information
     9                                  ;  Project title: Harmonic Series (Assignment 6)
    10                                  ;  Purpose: Preform summation of harmonic series until the user's input is less than or equal to the sum and return the number of
    11                                  ;		terms added. The number of terms added, clock speed (pre/post calc) are returned to the user.
    12                                  ;  Status: No known errors
    13                                  ;  Project files: driver.cpp, harmonicseries.asm, debug.inc, debug.asm
    14                                  ;Module information
    15                                  ;  This module's call name: harmonicseries
    16                                  ;  Language: X86-64
    17                                  ;  Syntax: Intel
    18                                  ;  Date last modified: 2014-May-07
    19                                  ;  Purpose: Brute force addition of harmonic series until the sumation of the values is equal to the user input.
    20                                  ;  File name: harmonicseries.asm
    21                                  ;  Status: In production.  No known errors.
    22                                  ;  Future enhancements: None planned
    23                                  ;Translator information
    24                                  ;  Assemble: nasm -f elf64 -l harmonicseries.lis -o harmonicseries.o harmonicseries.asm
    25                                  ;References and credits
    26                                  ;  CSUF/Professor Floyd Holliday: http://holliday.ecs.fullerton.edu
    27                                  ;Print information
    28                                  ;  Page width: 132 columns
    29                                  ;  Begin comments: 65
    30                                  ;  Optimal print specification: Landscape, 9 points or smaller, monospace, 8Â1⁄2x11 paper
    31                                  ;
    32                                  ;===== Begin code area ============================================================================================================
    33                                  
    34                                  %include "debug.inc" 					    ;This file contains the subprogram to be tested with this test program.
    35                              <1> ;System Title:  Debugger for X86 assembly programs
    36                              <1> ;Author: Floyd Holliday
    37                              <1> ;Email: activeprofessor@yahoo.com
    38                              <1> ;Status: Released for general use; bugs will be fixed when reported
    39                              <1> ;This module file name: debug.inc
    40                              <1> ;This module purpose: This file is an "include" file.  It allows data to pass directly from the calling statement to the subprogram.
    41                              <1> ;Language: X86
    42                              <1> ;Syntax: Intel
    43                              <1> ;Date of last update: 2013-Dec-13
    44                              <1> ;Source file structure: width is 140 characters; detailed comments begin in column 61.
    45                              <1> ;Printing: best results are obtained using landscape orientation with 9 point (or less) monospaced font.
    46                              <1> ;
    47                              <1> ;Targeted user group: Assembly programmers enrolled in programming courses like CPSC240.
    48                              <1> ;
    49                              <1> ;Requirements: debug.asm must be assembled into debug.o  This file is not to be assembled; it is used as is.  Place this file in the 
    50                              <1> ;directory along with debug.o and with other assembled object files.
    51                              <1> ;
    52                              <1> 
    53                              <1> ;===== showregisters ======================================================================================================================
    54                              <1> 
    55                              <1> extern showregisterssubprogram
    56                              <1> 
    57                              <1> %macro showregisters 1
    58                              <1>     push qword %1
    59                              <1>     call showregisterssubprogram
    60                              <1>     ;Question: Where is the pop corresponding to the push above?  Answer: In the ret statement.
    61                              <1> %endmacro
    62                              <1> 
    63                              <1> ;===== showstack ==========================================================================================================================
    64                              <1> 
    65                              <1> extern showstacksubprogram
    66                              <1> 
    67                              <1> %macro dumpstack 3
    68                              <1>     push rsp                                      ;Save the current value of rsp since rsp is very volatile
    69                              <1>     push rbp                                      ;Save the current value of rbp for insurance
    70                              <1>     push qword %3                                 ;number of qwords inside the stack
    71                              <1>     push qword %2                                 ;number of qwords outside the stack
    72                              <1>     push qword %1                                 ;an arbitrary integer created by the caller
    73                              <1>     call showstacksubprogram
    74                              <1>     ;Question: Where are the pops corresponding to three pushes above?  Answer: In the ret statement.
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> ;===== showfpu ============================================================================================================================
    78                              <1> 
    79                              <1> extern showfpusubprogram
    80                              <1> 
    81                              <1> %macro showfpuregisters 1
    82                              <1>     push qword %1                                 ;Integer identifying this showing of the fpu registers.
    83                              <1>     call showfpusubprogram
    84                              <1>     ;Where are the pops corresponding to those pushes?
    85                              <1> %endmacro
    86                              <1> 
    87                              <1> ;===== showxmm ============================================================================================================================
    88                              <1> 
    89                              <1> extern showxmmsubprogram
    90                              <1> 
    91                              <1> %macro showxmmregisters 1
    92                              <1>      push qword %1
    93                              <1>      call showxmmsubprogram
    94                              <1> %endmacro
    95                              <1> 
    96                              <1> ;===== showymm ============================================================================================================================
    97                              <1> 
    98                              <1> extern showymmsubprogram
    99                              <1> 
   100                              <1> %macro showymmregisters 1
   101                              <1>     push qword %1
   102                              <1>     call showymmsubprogram
   103                              <1> %endmacro
   104                              <1> 
   105                              <1> ;==========================================================================================================================================
   106                              <1> 
   107                              <1> ;How to use the debugger.
   108                              <1> 
   109                              <1> ;1.  Assemble the file debug.asm and thereby create an object file known as debug.o
   110                              <1> 
   111                              <1> ;2.  Place into one single directory this file, debug.inc, and debug.o, and as many addition source file as desired.
   112                              <1> 
   113                              <1> ;3.  Insert the statement < %include "debug.inc" > without angle brackets into an asm source file to be debugged.  Place the statement 
   114                              <1> ;    before segment .data .
   115                              <1> 
   116                              <1> ;4.  In segment .text place debugging statements at places where you want to examen the contents of registers.  There are four kinds 
   117                              <1> ;    of debug statements, namely: show the integer registers, show the system stack, show the fpu registers, and show the SSE2 
   118                              <1> ;    registers.  Examples of each of the four kinds of debug statements are found below.
   119                              <1> 
   120                              <1> ;Example of debug statememts.
   121                              <1> 
   122                              <1> ;==============================================
   123                              <1> ;  showregisters 33
   124                              <1> ;==============================================
   125                              <1> ;The statement above will show the contents of all 16 integer registers and the contents of the flags register.  The trailing number 33 
   126                              <1> ;is arbitrary.  The number 33 in the example can be replaced with any integer, but it cannot be omitted.
   127                              <1> 
   128                              <1> ;==============================================
   129                              <1> ;  dumpstack 88, 2, 5
   130                              <1> ;==============================================
   131                              <1> ;The statement above will show the contents the system stack beginning with 2 quadwords outside of the top of the stack and ending with
   132                              <1> ;quadword #5 inside the stack for a total of 8 quadwords.  The first parameter 88 is an arbitrary integer selected by the programmer.
   133                              <1> ;The second parameter 2 indicates the number of quadwords beyond the top to be displayed.  To display nothing outside of the stack set
   134                              <1> ;the middle parameter to 0.  The last parameter 5 is the number of qwords after the top to be display.  The count is from 0 to 5, and
   135                              <1> ;therefore, a 5 parameter will cause 6 qwords inside the stack to be outputted.
   136                              <1> 
   137                              <1> ;==============================================
   138                              <1> ;  showfpuregisters 133
   139                              <1> ;==============================================
   140                              <1> ;The statement above will show the contents of all 8 fpu registers.  The parameter 133 is arbitrary and may be replaced by any integer,
   141                              <1> ;but it cannot be omitted.
   142                              <1> 
   143                              <1> ;==============================================
   144                              <1> ;  showxmmregisters 888
   145                              <1> ;==============================================
   146                              <1> ;The statement above will show the contents of all 16 SSE2 registers.  The parameter 888 is arbitrary and may be replaced by any integer,
   147                              <1> ;but it cannot be omitted.
   148                              <1> 
   149                              <1> ;==============================================
   150                              <1> ;  showymmregisters 225
   151                              <1> ;==============================================
   152                              <1> ;The statement above will show the contents of all 16 AVE registers.  The parameter 225 is arbitrary and may be replaced by any integer,
   153                              <1> ;but it cannot be omitted.
   154                              <1> 
   155                              <1> 
   156                              <1> 
   157                              <1> 
   158                              <1> ;To the 240 class:
   159                              <1> ;This debug set of subprograms was derived from the original work of Dr Paul Carter.  He made a similar set of subprograms that could 
   160                              <1> ;be easily included in any assembly program.  All of his work was written in X86-32m and unfortunately, he seems to have lost interest 
   161                              <1> ;in updating his work.  You can and probably should visit his website: http://www.drpaulcarter.com/pcasm/.  There you may download the
   162                              <1> ;original include files which he called "asm_io.inc" and "asm_io.asm".  They are inside a zip file.  He also has a free ebook there on 
   163                              <1> ;X86-32 programming.  Yes, all the examples are 32-bit one, but the text description of instructions is still very helpful.  For 
   164                              <1> ;instance, in his ebook you can read a concise description of many of the FPU87 instructions, that is, those instructions that act on
   165                              <1> ;the st registers.  Yes, I am aware that others have tried to update his work to become relevant to 64-bit programming, but I still like
   166                              <1> ;the original ebook.
   167                              <1> 
   168                              <1> ;Thus, Dr Carter's work was the foundation for the debug.inc and debug.asm files you are now reading.  For the curious, you may wonder 
   169                              <1> ;what happens when an assembly program has to call a C++ function that requires more that 6 incoming parameters.  There is an example of
   170                              <1> ;passing 9 parameters to printf in the "showregisterssubprogram", which is inside the file debug.asm.  Notice the registerformat1 requires 8 numeric
   171                              <1> ;values be passed to printf in addition to passing the string registerformat1 in rdi.  
   172                              <1> 
   173                              <1> 
   174                              <1> 
   175                                  
   176                                  extern printf						    ;External C++ function for writing to standard output device
   177                                  
   178                                  extern scanf						    ;External C++ function for obtaining user input
   179                                  
   180                                  global harmonicseries	 				    ;This makes harmonicseries callable by functions outside of this file.
   181                                  
   182                                  segment .data						    ;Place initialized data here
   183                                  
   184                                  ;===== Message Declarations =======================================================================================================
   185                                  
   186 00000000 0A57656C636F6D6520-     welcome db 10, "Welcome to harmonic series by Art Grichine!", 10,
   187 00000009 746F206861726D6F6E-
   188 00000012 696320736572696573-
   189 0000001B 206279204172742047-
   190 00000024 72696368696E65210A 
   191 0000002D 0A5468652070726F67-     	db 10, "The program will compute a partial sum of the harmonic series.", 10,
   192 00000036 72616D2077696C6C20-
   193 0000003F 636F6D707574652061-
   194 00000048 207061727469616C20-
   195 00000051 73756D206F66207468-
   196 0000005A 65206861726D6F6E69-
   197 00000063 63207365726965732E-
   198 0000006C 0A                 
   199 0000006D 0A5468657365207265-             db 10, "These results were obtained on a MacBook Pro (late 2013) running Haswell i7 at 2.6GHz.", 10, 0
   200 00000076 73756C747320776572-
   201 0000007F 65206F627461696E65-
   202 00000088 64206F6E2061204D61-
   203 00000091 63426F6F6B2050726F-
   204 0000009A 20286C617465203230-
   205 000000A3 3133292072756E6E69-
   206 000000AC 6E672048617377656C-
   207 000000B5 6C2069372061742032-
   208 000000BE 2E3647487A2E0A00   
   209                                  
   210 000000C6 0A506C656173652065-     enter_number_x db 10, "Please enter a positive real number X: ", 0 
   211 000000CF 6E746572206120706F-
   212 000000D8 736974697665207265-
   213 000000E1 616C206E756D626572-
   214 000000EA 20583A2000         
   215                                  
   216 000000EF 54686520736D616C6C-     sum_being_computed db "The smallest harmonic sum ≥ X is being computed.", 10, 0
   217 000000F8 657374206861726D6F-
   218 00000101 6E69632073756D20E2-
   219 0000010A 89A520582069732062-
   220 00000113 65696E6720636F6D70-
   221 0000011C 757465642E0A00     
   222                                  
   223 00000123 506C65617365206265-     be_patient db "Please be patient . . . . The sum is now computed.", 10, 0
   224 0000012C 2070617469656E7420-
   225 00000135 2E202E202E202E2054-
   226 0000013E 68652073756D206973-
   227 00000147 206E6F7720636F6D70-
   228 00000150 757465642E0A00     
   229                                  
   230 00000157 546865206861726D6F-     results db "The harmonic sum is %1.15lf, which required the addition of %ld terms.", 10, 0
   231 00000160 6E69632073756D2069-
   232 00000169 732025312E31356C66-
   233 00000172 2C2077686963682072-
   234 0000017B 657175697265642074-
   235 00000184 686520616464697469-
   236 0000018D 6F6E206F6620256C64-
   237 00000196 207465726D732E0A00 
   238                                  
   239 0000019F 54686520636C6F636B-     system_clock_pre db "The clock time before the calculations began was %ld.", 10, 0
   240 000001A8 2074696D6520626566-
   241 000001B1 6F7265207468652063-
   242 000001BA 616C63756C6174696F-
   243 000001C3 6E7320626567616E20-
   244 000001CC 77617320256C642E0A-
   245 000001D5 00                 
   246                                  
   247 000001D6 54686520636C6F636B-     system_clock_post db "The clock time after completion of calculations was %ld.", 10, 0
   248 000001DF 2074696D6520616674-
   249 000001E8 657220636F6D706C65-
   250 000001F1 74696F6E206F662063-
   251 000001FA 616C63756C6174696F-
   252 00000203 6E732077617320256C-
   253 0000020C 642E0A00           
   254                                  
   255 00000210 546865206861726D6F-     elapsed_time db "The harmonic computation required %7ld clock cycles (tics) which is %1.8lf seconds.", 10, 0
   256 00000219 6E696320636F6D7075-
   257 00000222 746174696F6E207265-
   258 0000022B 717569726564202537-
   259 00000234 6C6420636C6F636B20-
   260 0000023D 6379636C6573202874-
   261 00000246 696373292077686963-
   262 0000024F 682069732025312E38-
   263 00000258 6C66207365636F6E64-
   264 00000261 732E0A00           
   265                                  
   266 00000265 546869732061737365-     return_to_caller db "This assembly program will return to the caller.", 10, 0
   267 0000026E 6D626C792070726F67-
   268 00000277 72616D2077696C6C20-
   269 00000280 72657475726E20746F-
   270 00000289 207468652063616C6C-
   271 00000292 65722E0A00         
   272                                  
   273 00000297 257300                  stringformat db "%s", 0						;general string format
   274                                  
   275 0000029A 256C6600                formatOneFloat db "%lf", 0					;this format will absorb Taylor Series input of float type 64-bit
   276                                  
   277                                  segment .bss							;Place un-initialized data here.
   278                                  
   279                                          ;This segment is empty
   280                                  
   281                                  segment .text							;Place executable instructions in this segment.
   282                                  
   283                                  harmonicseries:							;Entry point.  Execution begins here.
   284                                  
   285                                  ;=========== Back up all the integer registers used in this program ===============================================================
   286                                  
   287 00000000 55                      push rbp 							;Backup the stack base pointer
   288 00000001 4889E5                  mov  rbp, rsp							;copy stack on rbp to ensure proper restoration when program is done
   289 00000004 57                      push rdi 							;Backup the destination index
   290 00000005 56                      push rsi 							;Backup the source index
   291 00000006 52                      push rdx							;Backup the register
   292 00000007 51                      push rcx							;Backup the register
   293 00000008 4150                    push r8								;Backup the register
   294 0000000A 4151                    push r9								;Backup the register
   295 0000000C 4152                    push r10							;Backup the register
   296 0000000E 4153                    push r11							;Backup the register
   297 00000010 4154                    push r12							;Backup the register
   298 00000012 4155                    push r13							;Backup the register
   299 00000014 4156                    push r14							;Backup the register
   300 00000016 4157                    push r15							;Backup the register	
   301                                  
   302                                  ;============  Preliminary ========================================================================================================
   303                                  
   304 00000018 C5FC77                  vzeroall							;zeros out all SSE registers
   305                                  
   306                                  ;=========== Initialize divider register ==========================================================================================
   307                                  								;for our calculations we must set 3 SSE registry's to 1.0 to 
   308                                  								;accomidate for our algorithm: count, nth term, incrimentor
   309 0000001B 48B8000000000000F0-     mov  rax, 0x3ff0000000000000 					;copy HEX 1.0 value onto rax
   310 00000024 3F                 
   311 00000025 50                      push rax							;push rax value onto the stack for broadcast operation
   312 00000026 C4627D193424            vbroadcastsd ymm14, [rsp]					;makes ymm10 all 1.0, this will be our count
   313 0000002C C4627D192C24            vbroadcastsd ymm13, [rsp]					;makes ymm9 all 1.0, this will hold our nth term
   314 00000032 C4627D192424            vbroadcastsd ymm12, [rsp]					;ymm14 we will use ymm14 to incriment count by 1.0 each iteration
   315 00000038 58                      pop  rax							;push operand must be followed by a pop operation when complete
   316                                  
   317                                  ;=========== Show the initial message =============================================================================================
   318                                  
   319 00000039 4831C0                  xor  rax, rax							;tell printf not to expect any doubles in upcoming call
   320 0000003C 48BF-                   mov  rdi, stringformat 						;simple format indicating string ' "%s",0 '
   321 0000003E [9702000000000000] 
   322 00000046 48BE-                   mov  rsi, welcome 						;display: Welcome Message, Name, Machine, Purpose of Assignment 
   323 00000048 [0000000000000000] 
   324 00000050 E8(00000000)            call printf							;display welcome message from the driver program (.cpp)
   325                                  
   326                                  ;============ Input for X values ==================================================================================================
   327                                  
   328                                  ;==== Display message for x ====
   329 00000055 4831C0                  xor  rax, rax							;satisfies printf function, expects no doubles in upcoming printf
   330 00000058 48BF-                   mov  rdi, stringformat						;"%s"
   331 0000005A [9702000000000000] 
   332 00000062 48BE-                   mov  rsi, enter_number_x 					;message --> 10, "Please enter a positive real number X: ", 0
   333 00000064 [C600000000000000] 
   334 0000006C E8(00000000)            call printf							;display user prompt for 'x'
   335                                  
   336                                  ;==== Grab data for x ====
   337 00000071 4831C0                  xor  rax, rax							;clear rax registry
   338 00000074 6A00                    push qword 0							;allocate storage for an input number on int stack
   339 00000076 48BF-                   mov  rdi, formatOneFloat 					;formats input of scanf to recieve a float number "%lf"
   340 00000078 [9A02000000000000] 
   341 00000080 4889E6                  mov  rsi, rsp							;assign register to copy stack pointer location to absorb x
   342 00000083 E8(00000000)            call scanf							;scan user input for 'x' and place in appropriate space
   343 00000088 C57D103C24              vmovupd ymm15, [rsp] 						;place user x values onto ymm11 for upcoming manipulation
   344 0000008D 58                      pop rax								;deallocate memory allocation for input
   345                                  
   346                                  ;============ Read system clock pre-calculations===================================================================================
   347                                  								;System clock-speed found in 1/2 of rdx and 1/2 of rax, to get the
   348                                  								;accurate clock-speed (in tics) we must read the clock and then 
   349                                  								;combine the two registers (rdx:rax) into one for the full reading. 
   350                                  ;==== get system clock ====
   351 0000008E 0FA2                    cpuid								;stop 'look ahead' for cpu; lets us get a more accurate clock speed
   352 00000090 0F31                    rdtsc								;read cpu clock, values stored in rdx:rax
   353 00000092 41BD00000000            mov qword r13, 0						;zero out r13 register for upcoming calculations, will hold rax
   354 00000098 41BC00000000            mov qword r12, 0						;zero out r12 register for upcoming calculations, will hold rdx
   355 0000009E 4989C5                  mov 	  r13, rax						;place rdx value onto r13 in preparation to combine rax/rdx
   356 000000A1 4989D4                  mov 	  r12, rdx						;place rdx value onto r12 in preparation to combine rax/rdx
   357 000000A4 49C1E420                shl	  r12, 32						;shift r12 32 bits
   358 000000A8 4D09EC                  or	  r12, r13						;combine r12 and r13, r12 has entire system clock count now 
   359                                  
   360                                  ;============ Calculate Harmonic Sum ==============================================================================================
   361                                  
   362                                  ;==== computation starting message ====
   363 000000AB 4831C0                  xor  rax, rax							;tell printf not to expect any doubles in upcoming call
   364 000000AE 48BF-                   mov  rdi, stringformat 						;simple format indicating string ' "%s",0 '
   365 000000B0 [9702000000000000] 
   366 000000B8 48BE-                   mov  rsi, sum_being_computed					;display: "The smallest harmonic sum ≥ X is being computed.", 10, 0
   367 000000BA [EF00000000000000] 
   368 000000C2 E8(00000000)            call printf							;display message from the driver program (.cpp)
   369                                  
   370                                  ;==== single SSE computation ====
   371                                  iterate_again:							;iterate through until xmm10 ≥ xmm15 (user input)
   372                                  
   373 000000C7 C4417D10DD              vmovupd ymm11, ymm13						
   374 000000CC C441255EDC              vdivpd ymm11, ymm12
   375 000000D1 C4412D58D3              vaddpd ymm10, ymm11
   376                                  
   377 000000D6 66450F2ED7              ucomisd xmm10, xmm15						;compare count (xmm10) with our users Taylor Series number (xmm15)
   378 000000DB C4411D58E6              vaddpd  ymm12, ymm14						;increment count by 1
   379 000000E0 72E5                    jb iterate_again						;if xmm10 < xmm15 jump to 'iterate_again:' jb is 'jumb below', if
   380                                  
   381 000000E2 C4411D5CE6              vsubpd ymm12, ymm14						;subtrack 1 from count, after computation count is too high by 1
   382                                  
   383                                  ;============ Read system clock post-calculations==================================================================================
   384                                  
   385                                  ;==== get system clock ====
   386 000000E7 0FA2                    cpuid								;stop 'look ahead' for cpu
   387 000000E9 0F31                    rdtsc								;read cpu clock, values stored in rdx:rax
   388 000000EB 41BF00000000            mov qword r15, 0						;zero out r15 register for upcoming calculations, will hold rax
   389 000000F1 41BE00000000            mov qword r14, 0						;zero out r14 register for upcoming calculations, will hold rdx
   390 000000F7 4989C7                  mov 	  r15, rax						;place rax value onto r15 in preparation to combine rax/rdx
   391 000000FA 4989D6                  mov 	  r14, rdx						;place rdx value onto r14 in preparation to combine rax/rdx
   392 000000FD 49C1E620                shl	  r14, 32						;shift r14 32 bits
   393 00000101 4D09FE                  or	  r14, r15						;combine r14 and r15, r14 has entire system clock count now
   394                                  				
   395                                  ;==== output system clock pre-calc ====
   396 00000104 4C89E6                  mov rsi, r12							;place timer value from rax into rsi in preperation for output
   397 00000107 4831C0                  xor rax, rax							;zero-out rax register
   398 0000010A 48BF-                   mov rdi, system_clock_pre					;assign output format to rdi for printf output
   399 0000010C [9F01000000000000] 
   400 00000114 E8(00000000)            call printf							;print system clock tics pre-calculation
   401                                  							
   402                                  ;==== output system clock post-calc ====
   403 00000119 4C89F6                  mov rsi, r14							;place timer value from rax into rsi in preperation for output
   404 0000011C 4831C0                  xor rax, rax							;zero-out rax register
   405 0000011F 48BF-                   mov rdi, system_clock_post					;assign output format to rdi for printf output
   406 00000121 [D601000000000000] 
   407 00000129 E8(00000000)            call printf							;print system clock tics post-calculation
   408                                  
   409                                  ;========== Elapsed time ==========================================================================================================
   410                                  								;our values of clockspeed pre-calculations is in r12, clockspeed 
   411                                  								;post-calculations is in r14
   412                                  ;==== calculate elapsed time (tics) ====
   413 0000012E 4D29E6                  sub r14, r12							;subtract the clockspeed pre-calculation from post-calc clockspeed
   414                                  								;this gives us our elapsed time
   415                                  								
   416                                  								;bc we are doing floating point calculations it is easier to place
   417                                  								;values onto the SSE registry and do the calculations there.
   418                                  
   419                                  ;==== calculate elapsed time (ns) ====				;our ns conversion formula is (clockspeed (in tics) * 10) / 26 = ns
   420 00000131 41BB0A000000            mov       r11, 10						;need to increase numerator by factor of 10, set up upcoming calc
   421 00000137 F2490F2AE3              cvtsi2sd xmm4, r11						;convert 10 into floating point and place onto xmm4
   422 0000013C F2490F2AEE              cvtsi2sd xmm5, r14						;convert our clockspeed (in tics) and place onto xmm5
   423 00000141 C5DD59E5                vmulpd   ymm4, ymm5						;multiply clockspeed (in tics) by factor of 10
   424 00000145 41BB1A000000            mov       r11, 26						;int 26 onto r11 so that we may divide our value by(machine spd*10)
   425 0000014B F2490F2AEB              cvtsi2sd xmm5, r11						;convert 26 into floating point and place onto xmm5
   426 00000150 C5DD5EE5                vdivpd   ymm4, ymm5						;divide (tics * 10) by known cpu speed (2.6Ghz * 10) to get real ns	
   427 00000154 C5FD10C4                vmovupd  ymm0, ymm4						;output for nanoseconds ready on ymm0
   428                                  
   429                                  ;==== calculate elapsed time (sec) ====				;ns --> sec = ns/1billion
   430 00000158 41BB00CA9A3B            mov r11, 1000000000						;place 1billion onto r11 to prepare for floatpnt conversion on SSE
   431 0000015E F2490F2AEB              cvtsi2sd xmm5, r11						;converst 1billion into float number and place on xmm5
   432 00000163 C5DD5EE5                vdivpd ymm4, ymm5						;divide ns/1billion = elapsed time in seconds
   433 00000167 C5FD10C4                vmovupd ymm0, ymm4						;place elapsed time in seconds onto ymm1 for output
   434                                  
   435                                  ;==== output elapsed time ====					;elapsed time in tics sits on r14, ns on ymm0, sec on ymm1
   436 0000016B 4831C0                  xor rax, rax
   437 0000016E 4C89F6                  mov rsi, r14							;place elapsed time in tics on to rsi for output
   438 00000171 B801000000              mov rax, 1							;tell printf to find the first two numbers(ns/sec)on SSE(xmm0,xmm1)
   439 00000176 48BF-                   mov rdi, elapsed_time						;format output for elapsed time in tics, ns, and seconds
   440 00000178 [1002000000000000] 
   441 00000180 E8(00000000)            call printf							;output elapsed time in tics, ns, and seconds
   442                                  
   443                                  
   444                                  ;========== Output Results ========================================================================================================
   445                                  
   446                                  ;==== print output ====
   447 00000185 F2490F2DF4              cvtsd2si rsi, xmm12						;convert count from FPU to int and place on int registry for output
   448 0000018A C4C17D10C2              vmovupd ymm0, ymm10						;place sum on xmm0 in preparation for output (printf)
   449 0000018F B801000000              mov  rax, 1							;tell printf to expect 1 FPU value on the upcoming print
   450 00000194 48BF-                   mov  rdi, results	 					;prepare format for our values on printf
   451 00000196 [5701000000000000] 
   452 0000019E E8(00000000)            call printf							;print x and e^x values to the terminal
   453                                  
   454                                  ;========== Return Sum to driver ==================================================================================================
   455                                  
   456 000001A3 C4C17B10C2              vmovsd xmm0, xmm10						;Return sum to the driver program. Note: 'printf' in instructions
   457                                  								;  above has corrupted xmm0 so we must re-assign our sum before 
   458                                  								;  returning to the driver if we want the driver to recieve the sum
   459                                  
   460                                  ;=========== Now cleanup and return to the caller =================================================================================
   461                                  
   462 000001A8 415F                    pop r15								;Restore original value
   463 000001AA 415E                    pop r14								;Restore original value
   464 000001AC 415D                    pop r13								;Restore original value
   465 000001AE 415C                    pop r12								;Restore original value
   466 000001B0 415B                    pop r11								;Restore original value
   467 000001B2 415A                    pop r10								;Restore original value
   468 000001B4 4159                    pop r9								;Restore original value
   469 000001B6 4158                    pop r8								;Restore original value
   470 000001B8 59                      pop rcx								;Restore original value
   471 000001B9 5A                      pop rdx								;Restore original value
   472 000001BA 5E                      pop rsi								;Restore original value
   473 000001BB 5F                      pop rdi								;Restore original value
   474 000001BC 5D                      pop rbp								;Restore original value
   475                                  
   476 000001BD C3                      ret								;Return to driver program (.cpp)
   477                                                                                                 
   478                                  ;========== End of program harmonicseries.asm =====================================================================================
